{
  "version": 3,
  "sources": ["../src/web/extension.ts"],
  "sourcesContent": ["// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\n\t// This line of code will only be executed once when your extension is activated\n\tconsole.log('Congratulations, your extension \"svg-viewer\" is now active in the web extension host!');\n\n\t// The command has been defined in the package.json file\n\t// Now provide the implementation of the command with registerCommand\n\t// The commandId parameter must match the command field in package.json\n\t// let disposable = vscode.commands.registerCommand('svg-viewer.hello', () => {\n\t// \t// The code you place here will be executed every time your command is executed\n\n\t// \t// Display a message box to the user\n\t// \tvscode.window.showInformationMessage('Hello World from  in a web extension host!@!@!');\n\t// });\n\n\tcontext.subscriptions.push(\n\t\tvscode.window.registerCustomEditorProvider(\n\t\t\t\"svg-viewer.hello\",\n\t\t\tnew EditorProvider(context),\n\t\t\t{\n\t\t\t  webviewOptions: {\n          retainContextWhenHidden: true,\n\t\t\t  },\n\t\t\t  supportsMultipleEditorsPerDocument: false,\n\t\t\t}\n\t\t  )\n\t);\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}\n\nexport class EditorProvider implements vscode.CustomEditorProvider {\n\tconstructor(context: vscode.ExtensionContext) {\n\t\tthis.context = context;\n\t}\n\n\tprivate readonly context: vscode.ExtensionContext;\n\t\n\tprivate readonly _onDidChangeCustomDocument =\n\t\tnew vscode.EventEmitter<vscode.CustomDocumentContentChangeEvent>();\n\n\treadonly onDidChangeCustomDocument = this._onDidChangeCustomDocument.event;\n\n  async saveCustomDocument(\n    document: vscode.CustomDocument,\n    cancellation: vscode.CancellationToken\n  ): Promise<void> {\n    console.log(\"saveCustomDocument\")\n\t//   \n  }\n\n  async saveCustomDocumentAs(\n    document: vscode.CustomDocument,\n    destination: vscode.Uri,\n    cancellation: vscode.CancellationToken\n  ): Promise<void> {\n    console.log(\"saveCustomDocumentAs\")\n\t//   \n  }\n\n  async revertCustomDocument(\n    document: vscode.CustomDocument,\n    cancellation: vscode.CancellationToken\n  ): Promise<void> {\n    console.log(\"revertCustomDocument\")\n    // TODO\n  }\n\n  async backupCustomDocument(\n    document: vscode.CustomDocument,\n    context: vscode.CustomDocumentBackupContext,\n    cancellation: vscode.CancellationToken\n  ): Promise<vscode.CustomDocumentBackup> {\n    console.log(\"backupCustomDocument\")\n\t  return {} as vscode.CustomDocumentBackup\n  }\n\n  async openCustomDocument(\n    uri: vscode.Uri,\n    openContext: vscode.CustomDocumentOpenContext,\n    token: vscode.CancellationToken\n  ): Promise<vscode.CustomDocument> {\n    console.log(\"openCustomDocument\")\n    return {\n      uri,\n      dispose: () => undefined\n    }\n  }\n\n  async resolveCustomEditor(\n    document: vscode.CustomDocument,\n    webviewPanel: vscode.WebviewPanel,\n    token: vscode.CancellationToken\n  ): Promise<void> {\n    console.log(\"resolveCustomEditor\")\n    \n    webviewPanel.webview.onDidReceiveMessage((e) => {\n      vscode.window.showInformationMessage(e)\n    })\n\n    webviewPanel.webview.options = {\n      enableScripts: true,\n    };\n    const nonce = getNonce()\n    const isDevelopment = this.context.extensionMode === vscode.ExtensionMode.Development;\n\n    const csp = `\n    default-src 'none';\n    connect-src ${webviewPanel.webview.cspSource} https: data: ${isDevelopment ? \"ws://localhost:5971\" : \"\" };\n    img-src ${webviewPanel.webview.cspSource} https: data:;\n    font-src ${webviewPanel.webview.cspSource} https: data:;\n    style-src ${webviewPanel.webview.cspSource } https: data: 'unsafe-inline';\n    script-src 'nonce-${nonce}' 'unsafe-inline' 'unsafe-eval' 'strict-dynamic';\n  `;\n\n  const viteScripts = `\n  <script nonce=\"${nonce}\" type=\"module\">\n    console.log(\"load vite script\");\n    import RefreshRuntime from \"http://localhost:5971/@react-refresh\"\n    RefreshRuntime.injectIntoGlobalHook(window)\n    window.$RefreshReg$ = () => {}\n    window.$RefreshSig$ = () => (type) => type\n    window.__vite_plugin_react_preamble_installed__ = true\n  </script>\n  <script nonce=\"${nonce}\" type=\"module\" src=\"http://localhost:5971/@vite/client\"></script>\n`;\n\n    const scriptSrc = isDevelopment\n    ? \"http://localhost:5971/src/main.tsx\"\n    : webviewPanel.webview\n        .asWebviewUri(\n          vscode.Uri.joinPath(this.context.extensionUri, \"dist\", \"webview.js\")\n        )\n        .toString();\n        \n\n  //   const csp = `\n  //   default-src 'none';\n  //   connect-src ${webviewPanel.webview.cspSource} https: data:;\n  //   img-src ${webviewPanel.webview.cspSource} https: data:;\n  //   font-src ${webviewPanel.webview.cspSource} https: data:;\n  //   style-src ${webviewPanel.webview.cspSource } https: data: 'unsafe-inline';\n  //   script-src 'nonce-${nonce}' 'unsafe-inline' 'unsafe-eval' 'strict-dynamic';\n  // `;\n\n  //   const scriptSrc = webviewPanel.webview\n  //       .asWebviewUri(\n  //         vscode.Uri.joinPath(this.context.extensionUri, \"dist\", \"webview.js\")\n  //       )\n  //       .toString()\n\n    webviewPanel.webview.html = `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta http-equiv=\"Content-Security-Policy\" content=\"${csp}\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    </head>\n    <body>\n      <div id=\"root\"></div>\n      ${isDevelopment ? viteScripts : \"\"}\n      <script nonce=\"${nonce}\" type=\"module\" src=\"${scriptSrc}\"></script>\n    </body>\n    </html>\n    `\n  }\n}\n\nfunction getNonce(): string {\n  let text = \"\";\n  const possible =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  for (let i = 0; i < 32; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,aAAwB;AAIjB,SAAS,SAAS,SAAkC;AAI1D,UAAQ,IAAI,uFAAuF;AAYnG,UAAQ,cAAc;AAAA,IACd,cAAO;AAAA,MACb;AAAA,MACA,IAAI,eAAe,OAAO;AAAA,MAC1B;AAAA,QACE,gBAAgB;AAAA,UACX,yBAAyB;AAAA,QAC9B;AAAA,QACA,oCAAoC;AAAA,MACtC;AAAA,IACC;AAAA,EACH;AACD;AAGO,SAAS,aAAa;AAAC;AAEvB,IAAM,iBAAN,MAA4D;AAAA,EAClE,YAAY,SAAkC;AAM9C,SAAiB,6BAChB,IAAW,oBAAsD;AAElE,SAAS,4BAA4B,KAAK,2BAA2B;AARpE,SAAK,UAAU;AAAA,EAChB;AAAA,EASC,MAAM,mBACJ,UACA,cACe;AACf,YAAQ,IAAI,oBAAoB;AAAA,EAElC;AAAA,EAEA,MAAM,qBACJ,UACA,aACA,cACe;AACf,YAAQ,IAAI,sBAAsB;AAAA,EAEpC;AAAA,EAEA,MAAM,qBACJ,UACA,cACe;AACf,YAAQ,IAAI,sBAAsB;AAAA,EAEpC;AAAA,EAEA,MAAM,qBACJ,UACA,SACA,cACsC;AACtC,YAAQ,IAAI,sBAAsB;AACnC,WAAO,CAAC;AAAA,EACT;AAAA,EAEA,MAAM,mBACJ,KACA,aACA,OACgC;AAChC,YAAQ,IAAI,oBAAoB;AAChC,WAAO;AAAA,MACL;AAAA,MACA,SAAS,MAAM;AAAA,IACjB;AAAA,EACF;AAAA,EAEA,MAAM,oBACJ,UACA,cACA,OACe;AACf,YAAQ,IAAI,qBAAqB;AAEjC,iBAAa,QAAQ,oBAAoB,CAAC,MAAM;AAC9C,MAAO,cAAO,uBAAuB,CAAC;AAAA,IACxC,CAAC;AAED,iBAAa,QAAQ,UAAU;AAAA,MAC7B,eAAe;AAAA,IACjB;AACA,UAAM,QAAQ,SAAS;AACvB,UAAM,gBAAgB,KAAK,QAAQ,kBAAyB,qBAAc;AAE1E,UAAM,MAAM;AAAA;AAAA,kBAEE,aAAa,QAAQ,0BAA0B,gBAAgB,wBAAwB;AAAA,cAC3F,aAAa,QAAQ;AAAA,eACpB,aAAa,QAAQ;AAAA,gBACpB,aAAa,QAAQ;AAAA,wBACb;AAAA;AAGtB,UAAM,cAAc;AAAA,mBACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAQA;AAAA;AAGf,UAAM,YAAY,gBAChB,uCACA,aAAa,QACV;AAAA,MACQ,WAAI,SAAS,KAAK,QAAQ,cAAc,QAAQ,YAAY;AAAA,IACrE,EACC,SAAS;AAkBd,iBAAa,QAAQ,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,4DAK4B;AAAA;AAAA;AAAA;AAAA;AAAA,QAKpD,gBAAgB,cAAc;AAAA,uBACf,6BAA6B;AAAA;AAAA;AAAA;AAAA,EAIlD;AACF;AAEA,SAAS,WAAmB;AAC1B,MAAI,OAAO;AACX,QAAM,WACJ;AACF,WAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AAC3B,YAAQ,SAAS,OAAO,KAAK,MAAM,KAAK,OAAO,IAAI,SAAS,MAAM,CAAC;AAAA,EACrE;AACA,SAAO;AACT;",
  "names": []
}
